import React, { useEffect } from 'react';
import {
  AuxVerb,
  GrammarNumber,
  GrammarPerson,
  Pronoun,
  SentenceParams,
  Tense,
  VerbForm
} from '~/type';
import { tenses } from '~/lib/Tenses';
import { verbs } from '~/lib/Verbs2';
import { auxVerbs } from '~/lib/AuxVerbs';
import { specialVerbs } from '~/lib/SpecialVerbs';
import { pronouns } from '~/lib/Pronouns';
import { irregularVerbs } from '~/lib/IrregularVerbs';

type SentenceProps = {
  params: SentenceParams;
};

function getVerbForPronoun(verb: string | AuxVerb, pronoun: Pronoun, tense: Tense): string {
  if (typeof verb === 'object') {
    const verbForms = verb[tense];
    if (typeof verbForms === 'string') {
      return verbForms;
    }
    const verbTenseForm = verbForms[pronoun.person - 1];
    if (typeof verbTenseForm == 'string') {
      return verbTenseForm;
    }
    return verbTenseForm[pronoun.grammarNumber];
  } else {
    switch (tense) {
      case Tense.present:
        if (
          pronoun.grammarPerson === GrammarPerson.third &&
          pronoun.grammarNumber === GrammarNumber.singular
        ) {
          return verbs[verb][0];
        } else {
          return verb;
        }
      case Tense.past:
        if (verb in irregularVerbs) {
          return irregularVerbs[verb][0];
        } else {
          return verb + 'ed';
        }
      default:
        return verb;
    }
  }
}

function renderVerb(verbId: string, form: VerbForm, subject: Pronoun): string {
  switch (form) {
    case VerbForm.present:
      if (verbId in auxVerbs) {
        return getVerbForPronoun(auxVerbs[verbId], subject, Tense.present);
      } else {
        return getVerbForPronoun(verbId, subject, Tense.present);
      }
  }
  return '';
}

export const Sentence: React.FC<SentenceProps> = ({ params }) => {
  const tenseInfo = tenses[params.tense][params.aspect];
  const sentenceStruct = tenseInfo.forms[params.form];
  const sentenceSequence = sentenceStruct[params.voice];
  const subject = pronouns[params.pronounId] as Pronoun;
  const sentenceParts = {
    subject: pronouns[params.pronounId],
    verb: verbs[params.verbId],
    object: params.object
  };

  useEffect(() => {
    console.log('sentence params:', params);
    console.log('tenseInfo:', tenseInfo);
    console.log('sentenceStruct:', sentenceStruct);
    console.log('sentenceSequence:', sentenceSequence);
    console.log('sentenceParts:', sentenceParts);
  });

  let skipVerb = false;
  let auxPresent = false;

  return (
    <div id="sentence" className="sentence">
      {sentenceSequence.map((item: string) => {
        const [member, form] = item.split(':') as [string, VerbForm];
        switch (member) {
          case 'subject':
            return (
              <span key={item} className="pronoun">
                {sentenceParts.subject.spelling.subject}
              </span>
            );
          case 'verb':
            if (skipVerb) {
              return null;
            } else {
              const renderedVerb = renderVerb(params.verbId, form, subject);
              if (params.verbId === tenseInfo.aux_replace && !auxPresent) {
                return <span className="aux">{renderedVerb}</span>;
              } else {
                return <span className="verb">{renderedVerb}</span>;
              }
            }
        }

        return <span key={item}>{item}</span>;
      })}
    </div>
  );
};
